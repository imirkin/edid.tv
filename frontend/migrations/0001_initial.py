# pylint: skip-file
# -*- coding: utf-8 -*-
# Generated by Django 1.11.18 on 2019-01-19 10:54

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField()),
                ('submitted', models.DateTimeField(auto_now_add=True)),
                ('content', models.TextField()),
            ],
            options={
                'ordering': ('level', 'submitted'),
            },
        ),
        migrations.CreateModel(
            name='DetailedTiming',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('identification', models.IntegerField()),
                ('pixel_clock', models.PositiveIntegerField()),
                ('horizontal_active', models.PositiveSmallIntegerField()),
                ('horizontal_blanking', models.PositiveSmallIntegerField()),
                ('horizontal_sync_offset', models.PositiveSmallIntegerField()),
                ('horizontal_sync_pulse_width',
                 models.PositiveSmallIntegerField()),
                ('horizontal_image_size', models.PositiveSmallIntegerField()),
                ('horizontal_border', models.PositiveSmallIntegerField()),
                ('vertical_active', models.PositiveSmallIntegerField()),
                ('vertical_blanking', models.PositiveSmallIntegerField()),
                ('vertical_sync_offset', models.PositiveSmallIntegerField()),
                ('vertical_sync_pulse_width',
                 models.PositiveSmallIntegerField()),
                ('vertical_image_size', models.PositiveSmallIntegerField()),
                ('vertical_border', models.PositiveSmallIntegerField()),
                ('flags_interlaced',
                 models.BooleanField(default=False,
                                     verbose_name='interlaced')),
                ('flags_stereo_mode',
                 models.PositiveSmallIntegerField(choices=[
                     (0, 'Normal display, no stereo.'),
                     (2,
                      'Field sequential stereo, right image when stereo sync.'
                      ),
                     (4,
                      'Field sequential stereo, left image when stereo sync.'
                      ),
                     (3,
                      '2-way interleaved stereo, right image on even lines.'),
                     (5,
                      '2-way interleaved stereo, left image on even lines.'),
                     (6, '4-way interleaved stereo.'),
                     (7, 'Side-by-Side interleaved stereo.')
                 ],
                                                  verbose_name='stereo mode')
                 ),
                ('flags_sync_scheme',
                 models.PositiveSmallIntegerField(
                     choices=[(0, 'Analog Composite'),
                              (1, 'Bipolar Analog Composite'),
                              (2, 'Digital Composite'),
                              (3, 'Digital Separate')],
                     verbose_name='sync scheme')),
                ('flags_horizontal_polarity',
                 models.NullBooleanField(verbose_name='horizontal polarity')),
                ('flags_vertical_polarity',
                 models.NullBooleanField(verbose_name='vertical polarity')),
                ('flags_serrate',
                 models.NullBooleanField(verbose_name='serrate')),
                ('flags_composite_polarity',
                 models.NullBooleanField(verbose_name='composite polarity')),
                ('flags_sync_on_rgb',
                 models.NullBooleanField(verbose_name='sync on RGB')),
            ],
            options={
                'ordering': ['identification'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EDID',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('status',
                 models.PositiveSmallIntegerField(choices=[(0, 'Initialized'),
                                                           (1,
                                                            'Timings Added'),
                                                           (2, 'Edited'),
                                                           (3, 'Private')],
                                                  default=0)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('file_base64', models.TextField(editable=False)),
                ('manufacturer_product_code',
                 models.CharField(blank=True, max_length=4)),
                ('manufacturer_serial_number',
                 models.PositiveIntegerField(blank=True, null=True)),
                ('week_of_manufacture',
                 models.PositiveSmallIntegerField(blank=True, null=True)),
                ('year_of_manufacture',
                 models.PositiveSmallIntegerField(blank=True, null=True)),
                ('model_year',
                 models.PositiveSmallIntegerField(blank=True, null=True)),
                ('version',
                 models.PositiveSmallIntegerField(
                     choices=[(0, '1.0'), (1, '1.1'), (2, '1.2'), (
                         3, '1.3'), (4, '1.4'), (5, '2.0')])),
                ('monitor_name', models.CharField(blank=True, max_length=13)),
                ('monitor_serial_number',
                 models.CharField(blank=True, max_length=13)),
                ('monitor_data_string',
                 models.CharField(blank=True, max_length=13)),
                ('bdp_video_input',
                 models.PositiveSmallIntegerField(
                     choices=[(0, 'Analog'), (1, 'Digital')],
                     default=0,
                     verbose_name='video input')),
                ('bdp_signal_level_standard',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     choices=[(0, '(0.700, 0.300)'), (1, '(0.714, 0.286)'),
                              (2, '(1.000, 0.400)'),
                              (3, '(0.700, 0.000)')],
                     null=True,
                     verbose_name='signal level standard')),
                ('bdp_blank_to_black_setup',
                 models.NullBooleanField(
                     verbose_name='blank-to-black setup level')),
                ('bdp_separate_syncs',
                 models.NullBooleanField(verbose_name='separate sync')),
                ('bdp_composite_sync',
                 models.NullBooleanField(
                     verbose_name='composite sync signal on horizontal')),
                ('bdp_sync_on_green_video',
                 models.NullBooleanField(
                     verbose_name='composite sync signal on green video')),
                ('bdp_vsync_serration',
                 models.NullBooleanField(
                     verbose_name='serration on the vertical sync')),
                ('bdp_color_bit_depth',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     choices=[(0, 'Undefined'), (1, '6 bit'), (2, '8 bit'),
                              (3, '10 bit'), (4, '12 bit'), (5, '14 bit'),
                              (6, '16 bit')],
                     null=True,
                     verbose_name='color bit depth')),
                ('bdp_digital_video_interface',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     choices=[(0, 'Undefined'), (1, 'DVI'), (2, 'HDMI-A'),
                              (3, 'HDMI-B'), (4, 'MDDI'),
                              (5, 'DisplayPort')],
                     null=True,
                     verbose_name='digital video interface')),
                ('bdp_video_input_dfp_1',
                 models.NullBooleanField(
                     verbose_name='digital flat panel 1.x')),
                ('bdp_aspect_ratio',
                 models.DecimalField(blank=True,
                                     choices=[(Decimal('1.78'), '16:9'),
                                              (Decimal('0.56'), '9:16'),
                                              (Decimal('1.60'), '16:10'),
                                              (Decimal('0.62'), '10:16'),
                                              (Decimal('1.33'), '4:3'),
                                              (Decimal('0.75'), '3:4'),
                                              (Decimal('1.25'), '5:4'),
                                              (Decimal('0.80'), '4:5')],
                                     decimal_places=2,
                                     max_digits=3,
                                     null=True,
                                     verbose_name='aspect ratio')),
                ('bdp_horizontal_screen_size',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='horizontal screen size')),
                ('bdp_vertical_screen_size',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='vertical screen size')),
                ('bdp_max_horizontal_image_size',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='maximum horizontal image size')),
                ('bdp_max_vertical_image_size',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='maximum vertical image size')),
                ('bdp_display_gamma',
                 models.DecimalField(blank=True,
                                     decimal_places=2,
                                     max_digits=3,
                                     null=True,
                                     verbose_name='display gamma')),
                ('bdp_feature_standby',
                 models.BooleanField(default=False,
                                     verbose_name='standby mode')),
                ('bdp_feature_suspend',
                 models.BooleanField(default=False,
                                     verbose_name='suspend mode')),
                ('bdp_feature_active_off',
                 models.BooleanField(
                     default=False,
                     verbose_name='active off/very low power mode')),
                ('bdp_feature_display_type',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     choices=[(0, 'Monochrome or grayscale display'),
                              (1, 'RGB color display'),
                              (2, 'Non-RGB multicolor display'),
                              (3, 'Undefined')],
                     null=True,
                     verbose_name='display color type')),
                ('bdp_feature_standard_srgb',
                 models.BooleanField(default=False,
                                     verbose_name='standard sRGB')),
                ('bdp_feature_pref_timing_mode',
                 models.BooleanField(default=False,
                                     verbose_name='preferred timing mode')),
                ('bdp_feature_default_gtf',
                 models.NullBooleanField(verbose_name='default GTF')),
                ('bdp_feature_rgb444',
                 models.NullBooleanField(verbose_name='RGB 4:4:4 supported')),
                ('bdp_feature_ycrcb444',
                 models.NullBooleanField(
                     verbose_name='YCrCb 4:4:4 supported')),
                ('bdp_feature_ycrcb422',
                 models.NullBooleanField(
                     verbose_name='YCrCb 4:2:2 supported')),
                ('bdp_feature_continuous_frequency',
                 models.NullBooleanField(
                     verbose_name='continuous frequency')),
                ('chr_red_x',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='red x')),
                ('chr_red_y',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='red y')),
                ('chr_green_x',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='green x')),
                ('chr_green_y',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='green y')),
                ('chr_blue_x',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='blue x')),
                ('chr_blue_y',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='blue y')),
                ('chr_white_x',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='white x')),
                ('chr_white_y',
                 models.DecimalField(decimal_places=3,
                                     max_digits=4,
                                     verbose_name='white y')),
                ('est_timings_720_400_70',
                 models.BooleanField(default=False,
                                     verbose_name='720x400@70Hz')),
                ('est_timings_720_400_88',
                 models.BooleanField(default=False,
                                     verbose_name='720x400@88Hz')),
                ('est_timings_640_480_60',
                 models.BooleanField(default=False,
                                     verbose_name='640x480@60Hz')),
                ('est_timings_640_480_67',
                 models.BooleanField(default=False,
                                     verbose_name='640x480@67Hz')),
                ('est_timings_640_480_72',
                 models.BooleanField(default=False,
                                     verbose_name='640x480@72Hz')),
                ('est_timings_640_480_75',
                 models.BooleanField(default=False,
                                     verbose_name='640x480@75Hz')),
                ('est_timings_800_600_56',
                 models.BooleanField(default=False,
                                     verbose_name='800x600@56Hz')),
                ('est_timings_800_600_60',
                 models.BooleanField(default=False,
                                     verbose_name='800x600@60Hz')),
                ('est_timings_800_600_72',
                 models.BooleanField(default=False,
                                     verbose_name='800x600@72Hz')),
                ('est_timings_800_600_75',
                 models.BooleanField(default=False,
                                     verbose_name='800x600@75Hz')),
                ('est_timings_832_624_75',
                 models.BooleanField(default=False,
                                     verbose_name='832x624@75Hz')),
                ('est_timings_1024_768_87',
                 models.BooleanField(default=False,
                                     verbose_name='1024x768@87Hz')),
                ('est_timings_1024_768_60',
                 models.BooleanField(default=False,
                                     verbose_name='1024x768@60Hz')),
                ('est_timings_1024_768_70',
                 models.BooleanField(default=False,
                                     verbose_name='1024x768@70Hz')),
                ('est_timings_1024_768_75',
                 models.BooleanField(default=False,
                                     verbose_name='1024x768@75Hz')),
                ('est_timings_1280_1024_75',
                 models.BooleanField(default=False,
                                     verbose_name='1280x1024@75Hz')),
                ('monitor_range_limits',
                 models.BooleanField(default=False,
                                     verbose_name='monitor range limits')),
                ('mrl_min_horizontal_rate',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='minimum horizontal rate')),
                ('mrl_max_horizontal_rate',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='maximum horizontal rate')),
                ('mrl_min_vertical_rate',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='minimum vertical rate')),
                ('mrl_max_vertical_rate',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='maximum vertical rate')),
                ('mrl_max_pixel_clock',
                 models.DecimalField(
                     blank=True,
                     decimal_places=2,
                     max_digits=5,
                     null=True,
                     verbose_name='maximum supported pixel clock')),
                ('mrl_secondary_gtf_curve_support',
                 models.NullBooleanField(verbose_name='secondary GTF curve')),
                ('mrl_secondary_gtf_start_freq',
                 models.PositiveSmallIntegerField(
                     blank=True, null=True, verbose_name='start frequency')),
                ('mrl_secondary_gtf_c',
                 models.PositiveSmallIntegerField(blank=True,
                                                  null=True,
                                                  verbose_name='C')),
                ('mrl_secondary_gtf_m',
                 models.PositiveSmallIntegerField(blank=True,
                                                  null=True,
                                                  verbose_name='M')),
                ('mrl_secondary_gtf_k',
                 models.PositiveSmallIntegerField(blank=True,
                                                  null=True,
                                                  verbose_name='K')),
                ('mrl_secondary_gtf_j',
                 models.PositiveSmallIntegerField(blank=True,
                                                  null=True,
                                                  verbose_name='J')),
                ('mrl_coordinated_video_timing_support',
                 models.NullBooleanField(
                     verbose_name='coordinated video timing support')),
                ('mrl_cvt_max_active_pixels_per_line',
                 models.PositiveIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='maximum active pixels per line')),
                ('mrl_cvt_aspect_ratio_4_3_supported',
                 models.NullBooleanField(verbose_name='4:3')),
                ('mrl_cvt_aspect_ratio_16_9_supported',
                 models.NullBooleanField(verbose_name='16:9')),
                ('mrl_cvt_aspect_ratio_16_10_supported',
                 models.NullBooleanField(verbose_name='16:10')),
                ('mrl_cvt_aspect_ratio_5_4_supported',
                 models.NullBooleanField(verbose_name='5:4')),
                ('mrl_cvt_aspect_ratio_15_9_supported',
                 models.NullBooleanField(verbose_name='15:9')),
                ('mrl_cvt_preferred_aspect_ratio',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     choices=[(0, '4:3'), (1, '16:9'), (2, '16:10'),
                              (3, '5:4'), (4, '15:9')],
                     null=True,
                     verbose_name='preferred aspect ratio')),
                ('mrl_cvt_standard_blanking_supported',
                 models.NullBooleanField(
                     verbose_name='CVT standard blanking supported')),
                ('mrl_cvt_reduced_blanking_supported',
                 models.NullBooleanField(
                     verbose_name='CVT reduced blanking supported')),
                ('mrl_cvt_horizontal_shrink_supported',
                 models.NullBooleanField(
                     verbose_name='horizontal shrink supported')),
                ('mrl_cvt_horizontal_stretch_supported',
                 models.NullBooleanField(
                     verbose_name='horizontal stretch supported')),
                ('mrl_cvt_vertical_shrink_supported',
                 models.NullBooleanField(
                     verbose_name='vertical shrink supported')),
                ('mrl_cvt_vertical_stretch_supported',
                 models.NullBooleanField(
                     verbose_name='vertical stretch supported')),
                ('mrl_cvt_preferred_vertical_refresh_rate',
                 models.PositiveSmallIntegerField(
                     blank=True,
                     null=True,
                     verbose_name='preferred vertical refresh rate')),
            ],
        ),
        migrations.CreateModel(
            name='GrabberRelease',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('platform',
                 models.PositiveSmallIntegerField(
                     choices=[(0, 'Linux'), (1, 'Mac OS X'), (2, 'Windows')])),
                ('commit', models.CharField(max_length=40)),
                ('release_file',
                 models.FileField(upload_to='edid-grabber/%Y/%m')),
                ('checksum_md5', models.CharField(max_length=32)),
                ('checksum_sha1', models.CharField(max_length=40)),
                ('uploaded', models.DateTimeField(auto_now_add=True)),
                ('sticky', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('name_id', models.CharField(max_length=3)),
            ],
            options={
                'ordering': ['name_id'],
            },
        ),
        migrations.CreateModel(
            name='StandardTiming',
            fields=[
                ('id',
                 models.AutoField(auto_created=True,
                                  primary_key=True,
                                  serialize=False,
                                  verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('identification', models.IntegerField()),
                ('horizontal_active', models.IntegerField()),
                ('vertical_active', models.IntegerField()),
                ('refresh_rate', models.IntegerField()),
                ('aspect_ratio',
                 models.SmallIntegerField(choices=[(0, '1:1'), (
                     1, '16:10'), (2, '4:3'), (3, '5:4'), (4, '16:9')])),
                ('EDID',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                   to='frontend.EDID')),
                ('user',
                 models.ForeignKey(
                     null=True,
                     on_delete=django.db.models.deletion.SET_NULL,
                     to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['identification'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='edid',
            name='manufacturer',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='frontend.Manufacturer'),
        ),
        migrations.AddField(
            model_name='edid',
            name='user',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='detailedtiming',
            name='EDID',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='frontend.EDID'),
        ),
        migrations.AddField(
            model_name='detailedtiming',
            name='user',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='comment',
            name='EDID',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to='frontend.EDID'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to='frontend.Comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to=settings.AUTH_USER_MODEL),
        ),
    ]
